(define (vector-append v1 v2)
	(define (loop nv n1 n2)
		(let ((i1 (- (vector-length v1) n1))
					(i2 (- (vector-length v2) n2)))
		(cond ((> n1 0) (begin 
											(vector-set! nv i1 (vector-ref v1 i1))
											(loop nv (- n1 1) n2))) 
					((> n2 0) (begin
											(vector-set! nv (+ i1 i2) (vector-ref v2 i2))
											(loop nv n1 (- n2 1)))) 
					(else nv))))
	(let ((n1 (vector-length v1))
				(n2 (vector-length v2)))
		(loop (make-vector (+ n1 n2)) n1 n2)) )

(define (vector-filter pred vec)
	(define (length-of-new n new-len)
		(cond ((= n (vector-length vec)) new-len)
			((pred (vector-ref vec n))
				(length-of-new (+ n 1) (+ new-len 1)))
			(else (length-of-new (+ n 1) new-len))) )

	(define (fill-new-vec nv vec n1 n2)
		(cond ((= n2 (vector-length vec)) nv)
			((pred (vector-ref vec n2))
				(begin (vector-set! nv n1 (vector-ref vec n2)) (fill-new-vec nv vec (+ n1 1) (+ n2 1))) )
			(else (fill-new-vec nv vec n1 (+ n2 1)))) )
	(fill-new-vec (make-vector (length-of-new 0 0)) vec 0 0)
)

(define (swap vec i1 i2)
	(let ((elem (vector-ref vec i1)))
		(begin (vector-set! vec i1 (vector-ref vec i2))
					 (vector-set! vec i2 elem))) )

(define (bubble-sort! comparator vec)
	(let ((last-index (- (vector-length vec) 1)))
		(define (walk index swaped)
			(cond ((= index last-index) swaped)
						((comparator (vector-ref vec index) (vector-ref vec (+ index 1)))
							(begin 
								(swap vec index (+ index 1))
								(walk (+ index 1) #t)))
						(else (walk (+ index 1) swaped))))
		(define (loop func)
			(if (func)
				(begin (set! last-index (- last-index 1)) (loop func))
				#t))
	(loop (lambda () (walk 0 #f)))))
